#!/bin/bash
set -e -u -o pipefail
IFS=$'\n\t'

# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
#
# Will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
# "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature
# Read more: https://docs.docker.com/engine/swarm/secrets/
file_env() {
  local var="$1"
  local fileVar="${var}_FILE"
  local def="${2:-}"
  if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
    echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
    exit 1
  fi
  local val="$def"
  if [ "${!var:-}" ]; then
    val="${!var}"
  elif [ "${!fileVar:-}" ]; then
    val="$(<"${!fileVar}")"
  fi
  export "$var"="$val"
  unset "$fileVar"
}

entrypoint_info 'Load various environment variables'
manualEnvs=()
envs=(
  ENV
  "${manualEnvs[@]}"
  NGINX_CLIENT_MAX_BODY_SIZE
)

# Set empty environment variable or get content from "/run/secrets/<something>"
for e in "${envs[@]}"; do
  file_env "$e"
done

# Set default values
: "${NGINX_CLIENT_MAX_BODY_SIZE:=100M}"
: "${ENV:=prod}"

missing_manual_settings=
for e in "${manualEnvs[@]}"; do
  if [ -z "${!e}" ]; then
    missing_manual_settings=1
    case $e in
      *)
        ;;
    esac
  fi
done
if [ "$missing_manual_settings" = 1 ]; then
    entrypoint_error "You haven't set all the important values. Above you can copy-paste the generated ones, but make sure to use them."
    exit 1
fi
unset missing_manual_settings

entrypoint_info 'Dump environment variables into /etc/environment'
printenv | sed -r "s/'/\\\'/gm" | sed -r "s/^([^=]+=)(.*)\$/\1'\2'/gm" > /etc/environment
