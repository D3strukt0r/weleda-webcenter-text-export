name: CI/CD

on:
  push:
    branches:
      - "**"
    tags:
      - "*.*.*"
    paths:
      - .github/workflows/ci-cd.yml
      - "pwa/.docker/**"
      - "pwa/public/**"
      - "pwa/src/**"
      - pwa/.dockerignore
      - pwa/.yarnrc.yml
      - pwa/Dockerfile
      - pwa/package.json
      - pwa/tsconfig.json
      - pwa/yarn.lock

  pull_request:

  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    # https://github.com/marketplace/actions/build-and-push-docker-images#local-registry
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      # https://github.com/actions/cache/blob/main/examples.md#node---yarn-2
      - run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
        id: yarn-cache-dir-path
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install --immutable
        working-directory: ./pwa

      - run: yarn run build
        working-directory: ./pwa

      - run: yarn run test
        working-directory: ./pwa

      # Supports "linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6" usually
      - uses: docker/setup-qemu-action@v1
        id: qemu

      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          driver-opts: network=host

      # https://github.com/marketplace/actions/build-and-push-docker-images#leverage-github-cache
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - uses: docker/build-push-action@v2
        with:
          context: ./pwa
          # build-args:
          tags: localhost:5000/name/app:latest
          # pull: false
          # target:
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6
          # load: false
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/name/app:latest

  # Deploy to Dev/Staging/Production
  deploy:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.repository == 'D3strukt0r/weleda-webcenter-text-export'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml
      # https://github.com/docker/build-push-action#complete-workflow
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE="$(echo "${{ secrets.DOCKER_IMAGE }}" | tr '[A-Z]' '[a-z]')"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Rename branches which stand for latest or similar
          if [ "$VERSION" = '${{ github.event.repository.default_branch }}' ]; then
            VERSION=latest
          elif [ "$VERSION" = 'develop' ]; then
            VERSION=nightly
          else
            # Rename my/branch to my-branch
            VERSION=$(echo "$VERSION" | sed -r 's#/+#-#g')
          fi

          # Strip "v" prefix from tag name
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=$(echo $VERSION | sed -e 's/^v//')
          fi

          # Create tags
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          # elif [ "${{ github.event_name }}" = 'push' ]; then
          #   TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      # Supports "linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6" usually
      - uses: docker/setup-qemu-action@v1
        id: qemu

      - uses: docker/setup-buildx-action@v1
        id: buildx

      # https://github.com/marketplace/actions/build-and-push-docker-images#leverage-github-cache
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: ./pwa
          # build-args:
          # https://github.com/opencontainers/image-spec/blob/master/annotations.md
          labels: |
            maintainer=Manuele Vaccari <dev@d3strukt0r.me>
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          tags: ${{ steps.prep.outputs.tags }}
          # pull: false
          # target:
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6
          # load: false
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
